package presentation.scenes.playerview;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

import business.Mp3Player;
import business.data.Playlist;
import business.data.PlaylistManager;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.Slider;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import presentation.components.controllbuttons.ControllButtons;
import presentation.components.trackInformation.TrackInformationUI;
import presentation.scenes.playerview.PlayerView;

public class PlayerViewController {

	private BorderPane root;
	private Label albumLabel;
	private Label titleLabel; 
	private String title;
	private ImageView cover;
	private TrackInformationUI info;
	private ControllButtons controllButtons;
	private Button play;
	private Button playPause;
	private Button next;
	private Button back;
	private Button shuffle;
	private Button repeat;
	private Slider slider;
	private Mp3Player player;
	private String pauseIcon = "../assets/img/pause.png";
	private String playIcon = "../assets/img/play.png";
	Timer timer;
	TimerTask task;
	boolean isClicked = true;
	boolean playing = true;
	
	public PlayerViewController() {
		
		player = new Mp3Player();
		PlayerView mainView = new PlayerView();
		ControllButtons cb = new ControllButtons();
		TrackInformationUI inf = new TrackInformationUI();
		mainView.setImg(player.getPlaylist().getTracks().get(player.getTrackId()).byteToImage(player.getPlaylist().getTracks().get(player.getTrackId()).getImgPath()));
		mainView.trackInformation.setTitle(player.getPlaylist().getTracks().get(player.getTrackId()).getTitle());
		mainView.trackInformation.setArtist(player.getPlaylist().getTracks().get(player.getTrackId()).getArtist());
		albumLabel = mainView.albumLabel;
		titleLabel = mainView.titleLabel;
//		mainView.setImg(player.getPlaylist().getTracks().get(0).getImgPath());
		controllButtons = mainView.controllButtons;
		play = mainView.controllButtons.getPlayBtn();
		next = mainView.controllButtons.getNextBtn();
		back = mainView.controllButtons.getBackBtn();
		shuffle = mainView.controllButtons.getShuffleBtn();
		repeat = mainView.controllButtons.getRepeatBtn();
		slider = mainView.trackInformation.getDuration();
		
	
		play.addEventHandler(ActionEvent.ACTION, new EventHandler<ActionEvent>() {
			
			public void handle(ActionEvent e) {
				
					if (playing) {
						player.play();
						mainView.controllButtons.setImg(pauseIcon);
						System.out.println("Läuft " + playing);
						int length = player.length() / 1000 - 8;
						System.out.println(length);
						playing = false;
					} else if (!playing) {
						player.pause();
						mainView.controllButtons.setImg(playIcon);
						System.out.println("Läuft nicht " + playing);
						playing = true;
					}
			}
		});
		
		player.currentTimeProperty().addListener(new ChangeListener<Number>() {

			@Override
			public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
				System.out.println("Listener: " + newValue.intValue());
				String time = String.format("%02d:%02d", newValue.intValue() / 60, newValue.intValue() % 60);
				Platform.runLater(() -> mainView.trackInformation.getTime().setText(time.toString()));
				System.out.println("Slider " + player.currentSlideProperty().doubleValue());
				Platform.runLater(() -> mainView.trackInformation.getDuration().valueProperty().set(player.currentSlideProperty().doubleValue()));
				if (newValue.intValue() == 31) {
					player.next();
				}
			}
		});
		
		
		slider.valueProperty().addListener(new ChangeListener<Number>() {

			@Override
			public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
				System.out.println(newValue.doubleValue());
			}
			
		});
		
		next.addEventHandler(ActionEvent.ACTION, new EventHandler<ActionEvent>() {
			
			public void handle(ActionEvent e) {
				player.next();
				mainView.controllButtons.setImg(pauseIcon);
				playing = false;
				System.out.println("Track ID: " + player.getTrackId());
				mainView.setImg(player.getPlaylist().getTracks().get(player.getTrackId()).byteToImage(player.getPlaylist().getTracks().get(player.getTrackId()).getImgPath()));
				mainView.trackInformation.setTitle(player.getPlaylist().getTracks().get(player.getTrackId()).getTitle());
				mainView.trackInformation.setArtist(player.getPlaylist().getTracks().get(player.getTrackId()).getArtist());
			}
		});
		
		back.addEventHandler(ActionEvent.ACTION, new EventHandler<ActionEvent>() {
			
			public void handle(ActionEvent e) {
				player.back();
				mainView.controllButtons.setImg(pauseIcon);
				playing = false;
				mainView.setImg(player.getPlaylist().getTracks().get(player.getTrackId()).byteToImage(player.getPlaylist().getTracks().get(player.getTrackId()).getImgPath()));
				mainView.trackInformation.setTitle(player.getPlaylist().getTracks().get(player.getTrackId()).getTitle());
				mainView.trackInformation.setArtist(player.getPlaylist().getTracks().get(player.getTrackId()).getArtist());
			}
		});
		
		shuffle.addEventHandler(ActionEvent.ACTION, new EventHandler<ActionEvent>() {
			
			public void handle(ActionEvent e) {
				player.shuffle();
				playing = false;
				mainView.controllButtons.setImg(pauseIcon);
				mainView.setImg(player.getPlaylist().getTracks().get(player.getTrackId()).byteToImage(player.getPlaylist().getTracks().get(player.getTrackId()).getImgPath()));
				mainView.trackInformation.setTitle(player.getPlaylist().getTracks().get(player.getTrackId()).getTitle());
				mainView.trackInformation.setArtist(player.getPlaylist().getTracks().get(player.getTrackId()).getArtist());
			}
			
			// Back button zu andere View auch hier erzeugen
		});
		
		cover = mainView.cover;
		root = mainView;

		
	}
	
	public void initialize() {
		
	}
	
	// Ruft die FXML Datei auf, für FXML Datei? 
//	public void initalize() {
//		play.getPlayBtn().addEventHandler(ActionEvent.ACTION, new PlayHandler());
//		System.out.println("Funzt");
//		
//	};
	
	public Pane getRoot() {
		return root;
	}
	
	public Image byteToImage(byte[] imageData) {
		ByteArrayInputStream byteArray = new ByteArrayInputStream(imageData);
		return new Image(byteArray);
	}
}
