import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import de.hsrm.mi.eibo.simpleplayer.SimpleAudioPlayer;

public class PlaylistManager {
    private List<Playlist> playlists;

    public PlaylistManager(List<Playlist> playlists) {
        this.playlists = playlists;
    }
   
    /**
     * Save playlist as M3U 
     * 
     * @param playlist
     * @param filename
     */
//    public void savePlaylist(Playlist playlist) {
//        if (playlists.contains(playlist)) {
//            playlists.add(playlist.importM3U());
//        }
//    }
        
    /**
     * Add new Playlist to List
     * @param file
     */
    public void addPlaylist() {
        playlists.add();
    }
    
public Playlist importM3U(String fileName) {
    	
    	String file = fileName;
        Playlist playlist = null;

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            boolean isM3U = false;

            while ((line = reader.readLine()) != null) {
                if (line.startsWith("#EXTM3U")) {
                    isM3U = true;
                    playlist = new Playlist("Playlist 1");
                    
                } else if (isM3U) {
                    // Dies geht davon aus, dass die Zeilen in der M3U-Datei Dateipfade sind
                    Track track = new Track("Song Title", "Artist Name", line);
                    playlist.addTrack(track);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return playlist;
    }

//    public void createPlaylist(String name) {
//        Playlist playlist = new Playlist(name);
//        playlists.add(playlist);
//    }

    public void addTrackToPlaylist(Playlist playlist, Track track) {
        if (playlists.contains(playlist)) {
            playlist.addTrack(track);
        }
    }

    public void removeTrackFromPlaylist(Playlist playlist, Track track) {
        if (playlists.contains(playlist)) {
            playlist.removeTrack(track);
        }
    }

    /**
     * load playlist 
     * @param playlistName
     * @return
     */
    public Playlist getPlaylist(String playlistName) {
        for (Playlist playlist : playlists) {
            if (playlist.getName().equals(playlistName)) {
                return playlist;
            }
        }
        return null; // Playlist nicht gefunden
    }
//    
//    public List<Playlist> getAllTracks() {
//    	 for (Playlist playlist : playlists) {
//             System.out.println("Tracks: " + playlist.getTracks());
//         }    			
//    }
}
