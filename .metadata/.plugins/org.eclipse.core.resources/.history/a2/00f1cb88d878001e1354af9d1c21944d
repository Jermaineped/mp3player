import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Playlist {
    private String name;
    private String file;
    private List<Track> tracks;

    public Playlist(String name) {
        this.name = name;
        this.tracks = new ArrayList<>();
    }
    
//    public void saveToM3U(String filename) {
//        try (FileWriter writer = new FileWriter(filename)) {
//            for (Track track : tracks) {
//                // Schreibe den Dateipfad des Tracks in die M3U-Datei
//                writer.write(track.getFilePath() + "\n");
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }
    
    public Playlist importM3U() {
    	
    	file = "/Users/jpedraza/eclipse-workspace/mp3-player/music/test_playlist.m3u";
        Playlist playlist = null;

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            boolean isM3U = false;

            while ((line = reader.readLine()) != null) {
                if (line.startsWith("#EXTM3U")) {
                    isM3U = true;
                    playlist = new Playlist("Playlist 1");
                    
                    playlistManager.addPlaylist(playlist);
                    
                } else if (isM3U) {
                    // Dies geht davon aus, dass die Zeilen in der M3U-Datei Dateipfade sind
                    Track track = new Track("Song Title", "Artist Name", line);
                    playlist.addTrack(track);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return playlist;
    }

    public String getName() {
        return name;
    }

    public void addTrack(Track track) {
        tracks.add(track);
    }

    public void removeTrack(Track track) {
        tracks.remove(track);
    }

    public List<Track> getTracks() {
        return tracks;
    }
}
